)
dev.off()
pn_sil <- data_for_supp$PN_silaffin_like %>%
drop_na(.,Si_deplete_Ps_n) %>%
# filter(., !str_detect(id, "_317|_324|_213|_271|_296|_230|_7|_313")) %>% #i dont remember what this was meant to do- probably related to log2FC thresholds
arrange(.,Si_deplete_Ps_n) %>%
mutate(across(contains("plete"), ~ ifelse(-0.80735492205 < . & . <0.80735492205 , NA, .)))%>%
filter(!if_all(c(Si_deplete_Ps_n,N_deplete_Ps_n), is.na))
# filter(., Si_deplete_Ps_n < -0.80735492205 | Si_deplete_Ps_n >0.80735492205)#  %>% #log2fc filter of 1.75 aka
# filter(., N_deplete_Ps_n < -0.80735492205 | N_deplete_Ps_n >0.80735492205)
pn_sil_FDR <- data_for_supp_FDR$PN_silaffin_like  %>%
semi_join(., pn_sil, by = "id") %>%
filter(., Si_deplete_Ps_n < 0.05)
str(pn_sil)
str(pn_sil_FDR)
pn_sil <- pn_sil %>%
semi_join(., pn_sil_FDR, by = ("id")) %>%
column_to_rownames(., "id") %>%
select(., -pathway, -KO, -KO_name) %>%
select(., contains("_Ps_n")) %>%
mutate(across(contains("plet"), ~ na_if(.x, 0))) %>%
as.matrix(.)
pn_sil_FDR <- pn_sil_FDR %>%
arrange(match(id,rownames(pn_sil))) %>%
column_to_rownames(., "id") %>%
select(., -KO, -KO_name, -pathway) %>%
select(., contains("_Ps_n")) %>%
mutate_all(makeStars)%>%
as.matrix(.)
lmat = rbind(c(0,3,4),c(2,1,0))
lwid = c(0.4,1.2,0.7)
lhei = c(.15,1)
par(mar=c(7,4,4,2))
getwd()
tiff("figures/dyeatom_heatmap_pn_silaffin_main_2023_test.tiff", width =  3, height = 10.25, units = "in", res =400)
my_heatmap(fc1 = pn_sil, fc2 = NULL, fdr1 = pn_sil_FDR, plot_margin= c(10,7),
list_collabels = c("Si limited", "N limited"),
# list_row_labels= c("PNSL195*", "PNSL245*",
#                    "PNSL18*",  "PNSL105",
#                    "PNSL299*", "PNSL311",
#                    "PNSL288*", "PNSL108*",
#                    "PNSL270", "PNSL289*",
#                    "PNSL6*","PNSL208",
#                    "PNSL232*", "PNSL93",
#                    "PNSL266"  )
)
dev.off()
gc()
install.packages("scales")
curl::curl_download("https://download1.rstudio.org/electron/macos/RStudio-2023.09.0-463.dmg")
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "/Users/m.maniscalco/Library/CloudStorage/Dropbox/DYEatom_Si_Inc/")
source("dyeatom-edgeR-functions.R")
KOs_of_interest_path <- read_csv("/Users/m.maniscalco/Library/CloudStorage/Dropbox/DYEatom_Si_Inc/data/metadata/KOs_of_interest_dyeinc_pathway2022.csv")
KOs_of_interest_path <- read_csv("/Users/m.maniscalco/Library/CloudStorage/Dropbox/DYEatom_Si_Inc/data/metadata/KOs_of_interest_dyeinc_pathway2023.csv")
KOs_of_interest_path <- read_csv("/Users/m.maniscalco/Library/CloudStorage/Dropbox/DYEatom_Si_Inc/data/metadata/KOs_of_interest_dyeinc_pathway2023.csv")
N_depletion_up <- KOs_of_interest_path %>%
filter(pathway== "n_depletion_induced") %>%
select(KO)
N_depletion_down <- KOs_of_interest_path %>%
filter(pathway== "n_depletion_repressed") %>%
select(KO)
Si_depletion_up <- KOs_of_interest_path %>%
filter(pathway== "si_limitation_induced") %>%
select(KO)
Si_depletion_down <- KOs_of_interest_path %>%
filter(pathway== "si_limitation_repressed") %>%
select(KO)
PN_silaffin_like <- KOs_of_interest_path %>%
filter(pathway== "PN_silaffin_like") %>%
select(KO)
carbon <- KOs_of_interest_path %>%
filter(pathway== "carbon") %>%
select(KO)
my_indices <- list(N_deplet_up = N_depletion_up$KO, N_deplet_down = N_depletion_down$KO,
Si_deplet_up = Si_depletion_up$KO, Si_deplete_down = Si_depletion_down$KO,
carbon_gs = carbon$KO)
View(N_depletion_down)
View(my_indices)
View(my_indices)
my_indices[["N_deplet_up"]]
str(my_indices$N_deplet_up)
str(my_indices$)
str(my_indices)
install.packages("rsconnect")
setwd("/Users/m.maniscalco/dyeatom_metatranscriptome")
file_list <- list.files(path="results/salmon/", pattern= "\\.counts", full.names = T)
head(file_list, length(file_list))
file_list
setwd("/Users/m.maniscalco/dyeatom_metatranscriptome")
setwd("/Users/m.maniscalco/dyeatom_metatranscriptome/")
file_list <- list.files(path="results/salmon/", pattern= "\\.counts", full.names = T)
head(file_list, length(file_list))
file_list <- list.files(path="results/salmon/", pattern= "\\.sf", full.names = T)
head(file_list, length(file_list))
file_list <- list.files(path="results/salmon/", pattern= "*.sf", full.names = T)
head(file_list, length(file_list))
file_list <- list.files(path="results/salmon/", pattern= "\\*.sf", full.names = T)
head(file_list, length(file_list))
file_list <- list.files(path="results/salmon/", pattern= "\\.sf", full.names = T, recursive = TRUE)
head(file_list, length(file_list))
for (file in file_list){
base_name <- basename(file)
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- read_tsv(file, col_names=c("transcript", gsub("\\_R.*", "", base_name)), progress=FALSE)
}
# if the merged dataset does exist, append to it
else{
temp_dataset <-read_tsv(file, col_names=c("transcript", gsub("\\_R.*", "", base_name)), progress=FALSE)
dataset<-merge(dataset, temp_dataset, by = "transcript" )
rm(temp_dataset)
}
}
for (file in file_list){
base_name <- basename(file)
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- readr::read_tsv(file, col_names=c("transcript", gsub("\\_R.*", "", base_name)), progress=FALSE)
}
# if the merged dataset does exist, append to it
else{
temp_dataset <-read_tsv(file, col_names=c("transcript", gsub("\\_R.*", "", base_name)), progress=FALSE)
dataset<-merge(dataset, temp_dataset, by = "transcript" )
rm(temp_dataset)
}
}
# if the merged dataset does exist, append to it
else{
for (file in file_list){
base_name <- basename(file)
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- readr::read_tsv(file, col_names=c("transcript", gsub("\\_R.*", "", base_name)), progress=FALSE)
}
# if the merged dataset does exist, append to it
else{
temp_dataset <-readr::read_tsv(file, col_names=c("transcript", gsub("\\_R.*", "", base_name)), progress=FALSE)
dataset<-merge(dataset, temp_dataset, by = "transcript" )
rm(temp_dataset)
}
}
warnings()
file_list <- list.files(path="results/salmon/", pattern= "\\.counts", full.names = T, recursive = TRUE)
head(file_list, length(file_list))
for (file in file_list){
base_name <- basename(file)
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- readr::read_tsv(file, col_names=c("Name", gsub("\\_R.*", "", base_name)), progress=FALSE)
}
# if the merged dataset does exist, append to it
else{
temp_dataset <-readr::read_tsv(file, col_names=c("Name", gsub("\\_R.*", "", base_name)), progress=FALSE)
dataset<-merge(dataset, temp_dataset, by = "Name" )
rm(temp_dataset)
}
}
file_list <- list.files(path="results/salmon/", pattern= "\\.sf", full.names = T, recursive = TRUE)
head(file_list, length(file_list))
for (file in file_list){
base_name <- basename(file)
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- readr::read_tsv(file, col_names=c("Name", gsub("\\_R.*", "", base_name)), progress=FALSE)
}
# if the merged dataset does exist, append to it
else{
temp_dataset <-readr::read_tsv(file, col_names=c("Name", gsub("\\_R.*", "", base_name)), progress=FALSE)
dataset<-merge(dataset, temp_dataset, by = "Name" )
rm(temp_dataset)
}
}
files
file_lise
file_list
setwd("/Users/m.maniscalco/dyeatom_metatranscriptome")
file_list <- list.files(path="results/salmon/", pattern= "\\.sf", full.names = T, recursive = TRUE)
head(file_list, length(file_list))
setwd("/Users/m.maniscalco/dyeatom_metatranscriptome")
file_list <- list.files(path="results/salmon", pattern= "\\.sf", full.names = T, recursive = TRUE)
head(file_list, length(file_list))
for (file in file_list){
base_name <- basename(file)
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- readr::read_tsv(file, col_names=c("Name", gsub("\\_R.*", "", base_name)), progress=FALSE)
}
# if the merged dataset does exist, append to it
else{
temp_dataset <-readr::read_tsv(file, col_names=c("Name", gsub("\\_R.*", "", base_name)), progress=FALSE)
dataset<-merge(dataset, temp_dataset, by = "Name" )
rm(temp_dataset)
}
}
dataset
install.packages("tximportData")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("tximport")
library(tximport)
dir <- system.file("results/salmon", package = "tximportData")
list.files(dir)
files <- file.path(dir, "salmon", samples$run, "quant.sf.gz")
files <- file.path(dir, "salmon", samples$run, "quant.sf")
samples <- read.table(file.path(dir, "SRAnameLUT.csv"), header = TRUE)
dir <- system.file("results/", package = "tximportData")
list.files(dir)
dir <- system.file("", package = "tximportData")
list.files(dir)
samples <- read.table(file.path(dir, "SRAnameLUT.csv"), header = TRUE)
samples <- read.table(file.path(., "SRAnameLUT.csv"), header = TRUE)
samples <- read.table(file.path("", "SRAnameLUT.csv"), header = TRUE)
samples <- read.table(file.path("/Users/m.maniscalco/dyeatom_metatranscriptome", "SRAnameLUT.csv"), header = TRUE)
samples <- read.table( "SRAnameLUT.csv"), header = TRUE)
samples <- read.table( "SRAnameLUT.csv", header = TRUE)
samples
samples <- read.csv( "SRAnameLUT.csv", header = TRUE)
samples
files <- file.path(dir, "results/salmon", samples$SRA_id, "quant.sf")
files
names(files) <- paste0("sample", 1:6)
all(file.exists(files))
files <- file.path(dir, "results/salmon", samples$SRA_id, "quant.sf")
names(files)
files <- file.path(dir, "results/salmon", samples$SRA_id, "quant.sf")
names(files)
files <- file.path(dir, "results/salmon", samples$SRA_id, "quant.sf")
samples
files <- file.path(dir, "results/salmon", samples$SRA_id, "quant.sf")
names(files) <- paste0("sample", 1:6)
all(file.exists(files))
files <- file.path(dir, "results/salmon", samples$SRA_id, "quant.sf")
files
all(file.exists(files))
file_list <- list.files(path="", pattern= "\\.sf", full.names = T, recursive = TRUE)
head(file_list, length(file_list))
files
getwd()
file_list <- list.files(path="", pattern= "\\.sf", full.names = T, recursive = TRUE)
file_list
dir
dir <- system.file("", package = "tximportData")
list.files(dir)
dir
dir <- system.file("/Users/m.maniscalco/dyeatom_metatranscriptome", package = "tximportData")
dir
list.files(dir)
list.files(dir)
samples <- read.csv( "SRAnameLUT.csv", header = TRUE)
samples
files <- file.path(dir, "results/salmon", samples$SRA_id, "quant.sf")
names(files) <- paste0("sample", 1:17)
all(file.exists(files))
files <- file.path("results/salmon", samples$SRA_id, "quant.sf")
files
paste0("sample", 1:6)
# names(files) <- paste0("sample", 1:6)
txi.salmon <- tximport(files, type = "salmon", tx2gene = tx2gene)
# names(files) <- paste0("sample", 1:6)
txi.salmon <- tximport(files, type = "salmon")
files
test <- list(files)
test
View(test)
filenames
files
# Extract the portion of the file path for naming (e.g., "SRR17287625")
names <- sub(".*/salmon/([^/]+)/.*", "\\1", files)
names
# Create a named list
named_list <- setNames(as.list(files), names)
named_list
test <- purrr::map(named_list,  read.delim(.x))
test <- purrr::map(named_list,  ~read.delim(.x))
View(test)
View(test[["SRR17287625"]])
temp="test"
temp="test"+"2"
temp=c("test","2")
temp
temp=paste0("test","2")
temp
test <- purrr::imap(named_list,  ~read.delim(.x)%>%
dplyr::rename(.y = NumReads,
paste0(.y,"_TPM")=TPM))
test <- purrr::imap(named_list,  ~read.delim(.x)%>%
dplyr::rename(.y = NumReads,
!!paste0(.y,"_TPM")=TPM))
View(test)
View(test[["SRR17287625"]])
View(named_list)
test <- purrr::imap(named_list, ~read.delim(.x)%>%
dplyr::rename(.y = NumReads,
!!paste0(.y,"_TPM")=TPM))
test <- purrr::imap(named_list, ~read.delim(.x)%>%
dplyr::rename(.y = NumReads,
!!paste0(.y,"_TPM"):=TPM))
library(dplyr)
samples <- read.csv( "SRAnameLUT.csv", header = TRUE)
files <- file.path(dir, "results/salmon", samples$SRA_id, "quant.sf")
files
# Extract the portion of the file path for naming (e.g., "SRR17287625")
names <- sub(".*/salmon/([^/]+)/.*", "\\1", files)
# Create a named list
named_list <- setNames(as.list(files), names)
test <- purrr::imap(named_list, ~read.delim(.x)%>%
dplyr::rename(.y = NumReads,
!!paste0(.y,"_TPM"):=TPM))
test <- purrr::imap(named_list, ~read.delim(.x)%>%
dplyr::rename(.y = NumReads,
!!paste0(.y,"_TPM"):=TPM))
test <- purrr::imap(named_list, ~read.delim(.x)%>%
dplyr::rename(.y = NumReads)),
test <- purrr::imap(named_list, ~read.delim(.x)%>%
dplyr::rename(.y = NumReads))#,
setwd("/Users/m.maniscalco/dyeatom_metatranscriptome")
getwd()
files <- file.path(dir, "results/salmon", samples$SRA_id, "quant.sf")
# Extract the portion of the file path for naming (e.g., "SRR17287625")
names <- sub(".*/salmon/([^/]+)/.*", "\\1", files)
# Create a named list
named_list <- setNames(as.list(files), names)
View(named_list)
View(samples)
View(samples)
library(dplyr)
files <- file.path("results/salmon", samples$SRA_id, "quant.sf")
files
# Extract the portion of the file path for naming (e.g., "SRR17287625")
names <- sub(".*/salmon/([^/]+)/.*", "\\1", files)
# Create a named list
named_list <- setNames(as.list(files), names)
test <- purrr::imap(named_list, ~read.delim(.x)%>%
dplyr::rename(.y = NumReads,
!!paste0(.y,"_TPM"):=TPM))
setwd("/Users/m.maniscalco/dyeatom_metatranscriptome")
samples <- read.csv( "SRAnameLUT.csv", header = TRUE)
files <- file.path("results/salmon", samples$SRA_id, "quant.sf")
# Extract the portion of the file path for naming (e.g., "SRR17287625")
names <- sub(".*/salmon/([^/]+)/.*", "\\1", files)
# Create a named list
named_list <- setNames(as.list(files), names)
test <- purrr::imap(named_list, ~read.delim(.x)%>%
dplyr::rename(.y = NumReads,
!!paste0(.y,"_TPM"):=TPM))
View(test)
View(test[["SRR17287625"]])
test <- purrr::imap(named_list, ~read.delim(.x)%>%
dplyr::rename(!!paste0(.y) := NumReads,
!!paste0(.y,"_TPM"):=TPM))
View(test[["SRR17287625"]])
View(temp_dataset)
View(test)
View(test[["SRR17287625"]])
dfMerged <- purrr::reduce(test, left_join)
View(dfMerged)
test <- purrr::imap(named_list, ~read.delim(.x)%>%
dplyr::rename(!!paste0(.y) := NumReads))
dfMerged <- purrr::reduce(test, left_join)
test <- purrr::imap(named_list, ~read.delim(.x)%>%
dplyr::select(-TMP) %>%
dplyr::rename(!!paste0(.y) := NumReads))
test <- purrr::imap(named_list, ~read.delim(.x)%>%
dplyr::select(-TPM) %>%
dplyr::rename(!!paste0(.y) := NumReads))
dfMerged <- purrr::reduce(test, left_join)
dfMerged <- purrr::reduce(test, left_join) %>%
dplyr::rename_at(vars(samples$SRA_id), ~ samples$sampleName)
dfMerged <- purrr::reduce(test, left_join) #%>%
dfMerged <- purrr::reduce(test, full_join) #%>%
dfMerged <- purrr::reduce(test, full_join) %>%
dplyr::rename_at(vars(samples$SRA_id), ~ samples$sampleName)
View(dfMerged)
str(dfMerged)
dfMerged <- purrr::reduce(test, full_join) %>%
dplyr::rename_at(vars(samples$SRA_id), ~ samples$sampleName) %>%
mutate(across(where(is.numeric),
~replace(., is.na(.), 0)))
test <- purrr::imap(named_list, ~read.delim(.x)%>%
dplyr::select(-TPM) %>%
dplyr::rename(Transcript = Name,
!!paste0(.y) := NumReads))
dfMerged <- purrr::reduce(test, full_join) %>%
dplyr::rename_at(vars(samples$SRA_id), ~ samples$sampleName) %>%
mutate(across(where(is.numeric),
~replace(., is.na(.), 0))) %>%
dplyr
dfMerged <- purrr::reduce(test, full_join) %>%
dplyr::rename_at(vars(samples$SRA_id), ~ samples$sampleName) %>%
mutate(across(where(is.numeric),
~replace(., is.na(.), 0)))
dfMerged <- purrr::reduce(test, full_join) %>%
dplyr::rename_at(vars(samples$SRA_id), ~ samples$sampleName) %>%
mutate(across(where(is.numeric),
~replace(., is.na(.), 0)))%>% distinct(transcript, .keep_all = T)
test <- purrr::imap(named_list, ~read.delim(.x)%>%
dplyr::select(-TPM) %>%
dplyr::rename(transcript = Name,
!!paste0(.y) := NumReads))
dfMerged <- purrr::reduce(test, full_join) %>%
dplyr::rename_at(vars(samples$SRA_id), ~ samples$sampleName) %>%
mutate(across(where(is.numeric),
~replace(., is.na(.), 0)))%>% distinct(transcript, .keep_all = T)
test <- purrr::imap(named_list, ~read.delim(.x)%>%
dplyr::select(-TPM,EffectiveLength) %>%
dplyr::rename(transcript = Name,
!!paste0(.y) := NumReads))
dfMerged <- purrr::reduce(test, full_join) %>%
dplyr::rename_at(vars(samples$SRA_id), ~ samples$sampleName) %>%
mutate(across(where(is.numeric),
~replace(., is.na(.), 0)))#%>% distinct(transcript, .keep_all = T)
View(dfMerged)
test <- purrr::imap(named_list, ~read.delim(.x)%>%
dplyr::select(-TPM,-EffectiveLength) %>%
dplyr::rename(transcript = Name,
!!paste0(.y) := NumReads))
dfMerged <- purrr::reduce(test, full_join) %>%
dplyr::rename_at(vars(samples$SRA_id), ~ samples$sampleName) %>%
mutate(across(where(is.numeric),
~replace(., is.na(.), 0)))#%>% distinct(transcript, .keep_all = T)
library(dplyr)
setwd("/Users/m.maniscalco/dyeatom_metatranscriptome")
samples <- read.csv( "SRAnameLUT.csv", header = TRUE)
files <- file.path("results/salmon", samples$SRA_id, "quant.sf")
# Extract the portion of the file path for naming (e.g., "SRR17287625")
names <- sub(".*/salmon/([^/]+)/.*", "\\1", files)
names
# Create a named list
named_list <- setNames(as.list(files), names)
df_list <- purrr::imap(named_list, ~read.delim(.x)%>%
dplyr::select(-TPM,-EffectiveLength) %>%
dplyr::rename(transcript = Name,
!!paste0(.y) := NumReads))
# read files, rename columns, remove TMP and EffectiveLength columns
df_list <- purrr::imap(named_list, ~read.delim(.x)%>%
dplyr::select(-TPM,-EffectiveLength) %>%
dplyr::rename(transcript = Name,
!!paste0(.y) := NumReads))
dfMerged <- purrr::reduce(df_list, full_join) %>%
dplyr::rename_at(vars(samples$SRA_id), ~ samples$sampleName) %>%
mutate(across(where(is.numeric),
~replace(., is.na(.), 0)))
dataset <- purrr::reduce(df_list, full_join) %>%
dplyr::rename_at(vars(samples$SRA_id), ~ samples$sampleName) %>%
mutate(across(where(is.numeric),
~replace(., is.na(.), 0)))
rm(dfMerged)
# List of packages for session
.packages = c("dplyr", "argparser", "purrr")
# Installing CRAN packages (if not already installed)
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
# Loading packages into session
lapply(.packages, library, character.only = TRUE, quietly=TRUE)
# Add command line arguments
parser <- argparser::arg_parser(description = "Merge Salmon quant.sf  files together and use input project name to name output file")
parser$add_argument("-p",
"--project_string",
"proj_str",
default = "",
nargs=1,
help=". Input project name (-p) to include in output filename.")
parser$add_argument("-p",
"--project_string",
"proj_str",
default = "",
nargs=1,
help=". Input project name (-p) to include in output filename.")
parser$add_argument("-p",
"--project_string",
dest ="proj_str",
default = "",
nargs=1,
help="Input project name (-p) to include in output filename.")
# Add command line arguments
parser <- ArgumentParser(description = "Merge Salmon quant.sf  files together and use input project name to name output file")
library(argparser)
# Add command line arguments
parser <- ArgumentParser(description = "Merge Salmon quant.sf  files together and use input project name to name output file")
# List of packages for session
.packages = c("dplyr", "argparser", "purrr", "Xmisc")
# Installing CRAN packages (if not already installed)
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
# Loading packages into session
lapply(.packages, library, character.only = TRUE, quietly=TRUE)
# List of packages for session
.packages = c("dplyr", "argparse", "purrr", "Xmisc")
# Installing CRAN packages (if not already installed)
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
# Loading packages into session
lapply(.packages, library, character.only = TRUE, quietly=TRUE)
# List of packages for session
.packages = c("dplyr", "argparse", "purrr")
# Installing CRAN packages (if not already installed)
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
# Loading packages into session
lapply(.packages, library, character.only = TRUE, quietly=TRUE)
# Add command line arguments
parser <- ArgumentParser(description = "Merge Salmon quant.sf  files together and use input project name to name output file")
# Add command line arguments
parser <- argparse::ArgumentParser(description = "Merge Salmon quant.sf  files together and use input project name to name output file")
parser$add_argument("-p",
"--project_string",
dest ="proj_str",
default = "",
nargs=1,
help="Input project name (-p) to include in output filename.")
